done - implement pay()
done  * add handling for non-existing rows
done  * add handling of insufficient funds
done  * decimal arithmetics
done  * ensure source and destination accounts are never the same
done * use shorter identifiers for src_bic, src_ban, client id,
done * fetch old balances
done * add retrieval of a subset existing bic/bans, not random bic/bans
done * debug straightforward pay
done - implement pop()
done - implement check()
done - add total rps calculation
done - add latency calculation min/max
done - add latency 95/99/99.9
done - add --report-interval (default 1 second) reporting
done - add latency min/max/med/ to --report-interval
done - add rps to --report-interval
done - make the number of workers configurable
done - implement repair:
done  * add handling for pending_transfer != transfer_id
done  * add handling for client  mismatch
done - make scylla/cassandra credentials configurable
done - populate should create accounts in a predictable way, so that
       nothing is loaded back on start of pay()
done - add normal or zipfian distribution support of accounts
done - populate should resume until it performs exactly N writes
done - populate should generate dups
done * pop fatal error nil
done * we seem to lose all applier goroutines on errors in pay
done * balance mismatch
done  - stop deleting the transfer to see what happens and track double executions
done  * gocql.mapscan broken for scylla?
done * run recover at workload end
done * only end the workload when we fully recover/proceed with
done * fatalf deleting transfer with nil amount
done all transfers
done * check account not found are really not found
done * implement quorum populate
* count statistics on total attempts in addition to total successful attempts

Other:
- use more lightweight logging, zerolog or zap
